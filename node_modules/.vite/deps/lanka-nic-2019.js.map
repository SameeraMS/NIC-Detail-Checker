{
  "version": 3,
  "sources": ["../../lanka-nic-2019/index.js"],
  "sourcesContent": ["/* his pacakge code based on info found on\n  https://en.wikipedia.org/wiki/National_identity_card_(Sri_Lanka)\n\n*/\n\n/* WHY HARCODED MONTHS OBJECT :  Sri Lanka NIC ID originally generated assuming \n  that February having 29 days, including non leaf years.That means 366 days per year. \n  full explanation https://github.com/sacsand/lanka-nic-2019/issues/1\n*/\n\nconst monthArr = [\n  {\n    month: 'January',\n    days: 31\n  },\n  {\n    month: 'February',\n    days: 29\n  },\n  {\n    month: 'March',\n    days: 31\n  },\n  {\n    month: 'April',\n    days: 30\n  },\n  {\n    month: 'May',\n    days: 31\n  },\n  {\n    month: 'June',\n    days: 30\n  },\n  {\n    month: 'July',\n    days: 31\n  },\n  {\n    month: 'August',\n    days: 31\n  },\n  {\n    month: 'Septhember',\n    days: 30\n  },\n  {\n    month: 'October',\n    days: 31\n  },\n  {\n    month: 'November',\n    days: 30\n  },\n  {\n    month: 'December',\n    days: 31\n  }\n];\n\n// funtion to add char(s) to given index . if want remove some index.and return new string\nconst splice = (text, idx, rem, str) => text.slice(0, idx) + str + text.slice(idx + Math.abs(rem));\n\n// function checking the dayNo is in right range\nconst checkDayNo = (nicNumber, charIndex, length) => {\n  const dayNo = parseInt(nicNumber.substr(charIndex, length), 10);\n  return (dayNo > 0 && dayNo < 367) || (dayNo > 500 && dayNo < 867);\n};\n\nconst getDayGender = days => {\n  let dayNo = days;\n  let month = '';\n  const result = {\n    day: '',\n    month: '',\n    gender: ''\n  };\n\n  if (dayNo < 500) {\n    result.gender = 'Male';\n  } else {\n    result.gender = 'Female';\n    dayNo -= 500;\n  }\n\n  for (let i = 0; i < monthArr.length; i += 1) {\n    if (monthArr[i].days < dayNo) {\n      dayNo -= monthArr[i].days;\n    } else {\n      month = monthArr[i].month;\n      break;\n    }\n  }\n  result.day = dayNo;\n  result.month = month;\n  return result;\n};\n\n// get all data nic number\nconst getData = nicNumber => {\n  const result = {\n    input: '',\n    year: '',\n    dayNo: '',\n    character: '',\n    format: '',\n    oldFormat: '',\n    newFormat: '',\n    nicLength: ''\n  };\n\n  if (nicNumber.length === 10) {\n    result.input = nicNumber;\n    result.format = 'old';\n    result.year = nicNumber.substr(0, 2);\n    result.dayNo = nicNumber.substr(2, 3);\n    result.character = nicNumber.substr(9, 10);\n\n    /* convert old nic to new nic\n     1) get first 9 char\n     2) add 0 after 5th char\n     3) add 19 to front \n    */\n    result.newFormat = splice(splice(nicNumber.substr(0, 9), 5, 0, '0'), 0, 0, '19');\n    result.oldFormat = nicNumber;\n    result.nicLength = 10;\n  } else if (nicNumber.length === 12) {\n    result.input = nicNumber;\n    result.year = nicNumber.substr(0, 4);\n    result.dayNo = nicNumber.substr(4, 3);\n    result.character = '--';\n    result.format = 'new';\n    result.newFormat = nicNumber;\n    result.newFormat = nicNumber;\n\n    /* convert new nic to  old\n     0) check for the support to convert. only nic start with 19 can be converted to old nic format\n     1) extract 10 char after index 2\n     2) remove the char after the 5th index.\n     3) then add v to the end \n    */\n    result.oldFormat =\n      nicNumber.substr(0, 2) === '19'\n        ? splice(splice(nicNumber.substr(2, 10), 5, 1, ''), 9, 0, 'V')\n        : '--';\n\n    result.nicLength = 12;\n  }\n  return result;\n};\n\nconst validation = nicNumber => {\n  let isValidated = false;\n  const nicLength = nicNumber.length;\n  // get english Letter\n  const lastChar = nicNumber.substr(9, 1).toLowerCase();\n\n  /* old format -check the nic no count equal to 10 and first 9 char is a valid\n   number  and last char is not   a number and last charater should equal to x or y  \n   and day no is in right range */\n\n  if (\n    nicLength === 10 &&\n    !isNaN(nicNumber.substr(0, 9)) &&\n    isNaN(lastChar) &&\n    ['x', 'v'].includes(lastChar) &&\n    checkDayNo(nicNumber, 2, 3) === true\n  ) {\n    isValidated = true;\n    // new format - check\n  } else if (nicLength === 12 && !isNaN(nicNumber) && checkDayNo(nicNumber, 4, 3) === true) {\n    isValidated = true;\n  } else {\n    isValidated = false;\n  }\n\n  return isValidated;\n};\n\nconst formatDate = date => {\n  const year = date.getFullYear();\n\n  let month = (1 + date.getMonth()).toString();\n  month = month.length > 1 ? month : `0${month}`;\n\n  let day = date.getDate().toString();\n  day = day.length > 1 ? day : `0${day}`;\n\n  return `${month}/${day}/${year}`;\n};\n\nconst getAll = nicNumber => {\n  if (validation(nicNumber)) {\n    const { dayNo, year, format, newFormat, oldFormat, nicLength, input, character } = getData(\n      nicNumber\n    );\n\n    const { month, gender, day } = getDayGender(dayNo);\n\n    const bday = `${day}-${month}-${year}`;\n    let birthday = new Date(bday.replace(/(\\d{2})-(\\d{2})-(\\d{4})/, '$2/$1/$3'));\n    birthday = formatDate(birthday);\n\n    return {\n      isValidated: true,\n      input,\n      format,\n      newFormat,\n      oldFormat,\n      nicLength,\n      gender,\n      character,\n      birthday\n    };\n  }\n  return {\n    isValidated: false\n  };\n};\n\nconst swapNIC = nicNumber => {\n  const { newFormat, oldFormat, nicLength, isValidated } = getAll(nicNumber);\n\n  let result = 'incorrect format';\n\n  if (isValidated === true) {\n    result = nicLength === 10 ? newFormat : oldFormat;\n  }\n\n  return result;\n};\n\nmodule.exports = {\n  infoNic: getAll,\n  swapNic: swapNIC,\n  validateNic: validation\n};\n"],
  "mappings": "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",
  "names": []
}
